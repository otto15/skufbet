scalar Date

type Query {
    events: [Event]
    linesByEventId(eventId: Int!): [Line]
    betById(betId: Int!): Bet
    userProfile: UserProfile
}

type Mutation {
    userProfile: UserProfileMutation!
    betMutation: BetMutation!
    line: LineMutation!
}

type BetMutation {
    create(betCreateInput: BetCreateInput!): BetCreatePayload!
}

input BetCreateInput {
    userId: Int!
    lineId: Int!
    resultId: Int!
    amount: Int!
    coefficient: Float!
}

type BetCreatePayload {
    id: Int!
}

type UserProfileMutation {
    create(userProfileCreateInput: UserProfileCreateInput!): UserProfileCreatePayload!
}

input UserProfileCreateInput {
    mail: String!
    phoneNumber: String!
    password: String!
    firstName: String!
    lastName: String!
    passport: String!
    dateOfBirth: Date!
    taxPayerId: String!
}

type LineMutation {
    finish(finishLineInput: FinishLineInput!): FinishLinePayload!
}

input FinishLineInput {
    resultId: Int!,
}

type FinishLinePayload {
    lineId: Int!,
    resultId: Int!,
}

type UserProfile {
    id: Int!,
    balance: Int!
}

type UserProfileCreatePayload {
    id: Int!
}

type Tournament {
    id: Int
    name: String
}

type Event {
    id: Int
    name: String
    sport: String
    tournament: Tournament
}

type Result {
    id: Int
    result: String
    coefficient: Float
}

enum LineType {
    TOTAL
    SCORE
}

type Line {
    id: Int
    type: LineType
    availableResults: [Result]
    lineResult: Result
    isClosed: Boolean
}

enum Status {
    VALIDATING,
    FAILED_BY_BALANCE,
    FAILED_BY_COEFFICIENT,
    ACCEPTED,
    CALCULATED
}

type Bet {
    id: Int
    userId: Int
    lineId: Int
    resultId: Int
    amount: Int
    coefficient: Float
    status: Status
}
